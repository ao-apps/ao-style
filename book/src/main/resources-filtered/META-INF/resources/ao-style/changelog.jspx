<?xml version="1.0" encoding="UTF-8"?>
<!--
ao-style - Set of base CSS styles shared by multiple projects.
Copyright (C) 2020  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of ao-style.

ao-style is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ao-style is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ao-style.  If not, see <http://www.gnu.org/licenses />.
-->
<jsp:root
	xmlns:ao="https://aoindustries.com/ao-taglib/"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:changelog="https://semanticcms.com/changelog/taglib/"
	xmlns:core="https://semanticcms.com/core/taglib/"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	version="2.1"
>
	<jsp:directive.page language="java" pageEncoding="UTF-8" />
	<jsp:directive.page session="false" />
	<core:page
		title="@{documented.name} Changelog"
		shortTitle="Changelog"
		tocLevels="1"
		datePublished="2020-02-25T08:37:53-0600"
	>
		<!-- The current snapshot, unreleased version -->
		<c:set var="version" value="@{com.aoindustries:ao-style:pom.version}" />
		<ao:assert
			test="${!fn:startsWith(version, '@')}"
			message="Version not substituted: #{version}"
		/>
		<c:if test="${fn:endsWith(version, '-SNAPSHOT') and !fn:endsWith(version, '-POST-SNAPSHOT')}">
			<changelog:release
				projectName="@{documented.name}"
				version="#{version}"
				groupId="@{documented.groupId}"
				artifactId="@{documented.artifactId}"
				scmUrl="@{documented.scm.url}"
			>
				<ul>
					<li>
						Consolidated a base set of styles from multiple projects into this one place.
						These are very general concepts, like a table with a thin border.
						Any project that requires any of these styles should add this as a dependency.
					</li>
					<li>
						New CSS classes for table formatting:
						<code>ao-grid</code>, <code>ao-outside-border</code>, <code>ao-no-border</code>, <code>ao-packed</code>, and <code>ao-spread</code>.
					</li>
					<li>
						<p>
							TODO: Create a "ao-style-registry" or similar (maybe for more than just CSS files),
							which projects can add themselves to.  Then themes/skins/layouts/â€¦ can use
							this registry to be sure to include all styles.
						</p>
						<p>
							Registered CSS should have names, similar to name of web-fragment.xml,
							and support ordering by these names.  It might be useful to allow
							missing names in the ordering.  ao-graph DAG topological sorts can help
							with this implementation.
						</p>
						<p>
							Styles could have a few other relevant attributes, such as media,
							"isRTL" (select right-to-left automatically based on response language),
							and IE conditional comments.
						</p>
						<p>
							Perhaps there should also be a complete replacement option by name?
							Which could be useful when overriding all the styles, it would be
							useful to just skip the original?
						</p>
						<p>
							Does it make sense to keep track of which resources are required by a specific request,
							instead of including all registered CSS resources?  Can we just put a link tag
							wherever in HTML 5 (which we could use to add on first use)?
							Or, would this require full buffering to put them all in the head?
							With our aggressive one-year cache of CSS files (and other static resources)
							enabled by ao-servlet-last-modified, maybe this is really a non-issue.
						</p>
						<p>
							This registry could also possibly perform some automatic coalescing of all the
							registered styles into a single web resource.  Would be tricky, though, as it
							would require URL rewriting within the CSS, proper last modified timestamp
							management, and integration with LastModifiedServlet.
						</p>
					</li>
				</ul>
			</changelog:release>
		</c:if>
	</core:page>
</jsp:root>
